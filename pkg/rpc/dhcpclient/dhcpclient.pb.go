// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dhcpclient.proto

package dhcpclient

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//device info
type GetDeviceInfoReq struct {
	IpAddr               []string `protobuf:"bytes,1,rep,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceInfoReq) Reset()         { *m = GetDeviceInfoReq{} }
func (m *GetDeviceInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceInfoReq) ProtoMessage()    {}
func (*GetDeviceInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d48c230d990cbcac, []int{0}
}
func (m *GetDeviceInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceInfoReq.Merge(m, src)
}
func (m *GetDeviceInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceInfoReq proto.InternalMessageInfo

func (m *GetDeviceInfoReq) GetIpAddr() []string {
	if m != nil {
		return m.IpAddr
	}
	return nil
}

type GetDeviceInfoRsp struct {
	IpAddr               string   `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	CpuUsageRate         float32  `protobuf:"fixed32,2,opt,name=cpu_usage_rate,json=cpuUsageRate,proto3" json:"cpu_usage_rate,omitempty"`
	MemoryUsageRate      float32  `protobuf:"fixed32,3,opt,name=memory_usage_rate,json=memoryUsageRate,proto3" json:"memory_usage_rate,omitempty"`
	DiskUsageRate        float32  `protobuf:"fixed32,4,opt,name=disk_usage_rate,json=diskUsageRate,proto3" json:"disk_usage_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceInfoRsp) Reset()         { *m = GetDeviceInfoRsp{} }
func (m *GetDeviceInfoRsp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceInfoRsp) ProtoMessage()    {}
func (*GetDeviceInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d48c230d990cbcac, []int{1}
}
func (m *GetDeviceInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceInfoRsp.Merge(m, src)
}
func (m *GetDeviceInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceInfoRsp proto.InternalMessageInfo

func (m *GetDeviceInfoRsp) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *GetDeviceInfoRsp) GetCpuUsageRate() float32 {
	if m != nil {
		return m.CpuUsageRate
	}
	return 0
}

func (m *GetDeviceInfoRsp) GetMemoryUsageRate() float32 {
	if m != nil {
		return m.MemoryUsageRate
	}
	return 0
}

func (m *GetDeviceInfoRsp) GetDiskUsageRate() float32 {
	if m != nil {
		return m.DiskUsageRate
	}
	return 0
}

func init() {
	proto.RegisterType((*GetDeviceInfoReq)(nil), "dhcpclient.GetDeviceInfoReq")
	proto.RegisterType((*GetDeviceInfoRsp)(nil), "dhcpclient.GetDeviceInfoRsp")
}

func init() { proto.RegisterFile("dhcpclient.proto", fileDescriptor_d48c230d990cbcac) }

var fileDescriptor_d48c230d990cbcac = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xc9, 0x48, 0x2e,
	0x48, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x69, 0x73, 0x09, 0xb8, 0xa7, 0x96, 0xb8, 0xa4, 0x96, 0x65, 0x26, 0xa7, 0x7a, 0xe6, 0xa5,
	0xe5, 0x07, 0xa5, 0x16, 0x0a, 0x89, 0x73, 0xb1, 0x67, 0x16, 0xc4, 0x27, 0xa6, 0xa4, 0x14, 0x49,
	0x30, 0x2a, 0x30, 0x6b, 0x70, 0x06, 0xb1, 0x65, 0x16, 0x38, 0xa6, 0xa4, 0x14, 0x29, 0x2d, 0x65,
	0x44, 0x57, 0x5d, 0x5c, 0x80, 0xaa, 0x9a, 0x11, 0xa1, 0x5a, 0x48, 0x85, 0x8b, 0x2f, 0xb9, 0xa0,
	0x34, 0xbe, 0xb4, 0x38, 0x31, 0x3d, 0x35, 0xbe, 0x28, 0xb1, 0x24, 0x55, 0x82, 0x49, 0x81, 0x51,
	0x83, 0x29, 0x88, 0x27, 0xb9, 0xa0, 0x34, 0x14, 0x24, 0x18, 0x94, 0x58, 0x92, 0x2a, 0xa4, 0xc5,
	0x25, 0x98, 0x9b, 0x9a, 0x9b, 0x5f, 0x54, 0x89, 0xac, 0x90, 0x19, 0xac, 0x90, 0x1f, 0x22, 0x81,
	0x50, 0xab, 0xc6, 0xc5, 0x9f, 0x92, 0x59, 0x9c, 0x8d, 0xac, 0x92, 0x05, 0xac, 0x92, 0x17, 0x24,
	0x0c, 0x57, 0x67, 0x94, 0xc4, 0x25, 0x08, 0x71, 0x63, 0x40, 0x6a, 0x51, 0x5a, 0x7e, 0x51, 0x6e,
	0x62, 0x5e, 0x72, 0xaa, 0x90, 0x2f, 0x17, 0x2f, 0x8a, 0xdb, 0x85, 0x64, 0xf4, 0x90, 0x42, 0x06,
	0x3d, 0x10, 0xa4, 0xf0, 0xc8, 0x16, 0x17, 0x28, 0x31, 0x38, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78,
	0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0x43,
	0xd7, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x56, 0xee, 0xe1, 0x71, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DevicePerformanceClient is the client API for DevicePerformance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DevicePerformanceClient interface {
	//获取设备的性能信息
	GetDeviceInfo(ctx context.Context, in *GetDeviceInfoReq, opts ...grpc.CallOption) (*GetDeviceInfoRsp, error)
}

type devicePerformanceClient struct {
	cc *grpc.ClientConn
}

func NewDevicePerformanceClient(cc *grpc.ClientConn) DevicePerformanceClient {
	return &devicePerformanceClient{cc}
}

func (c *devicePerformanceClient) GetDeviceInfo(ctx context.Context, in *GetDeviceInfoReq, opts ...grpc.CallOption) (*GetDeviceInfoRsp, error) {
	out := new(GetDeviceInfoRsp)
	err := c.cc.Invoke(ctx, "/dhcpclient.DevicePerformance/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicePerformanceServer is the server API for DevicePerformance service.
type DevicePerformanceServer interface {
	//获取设备的性能信息
	GetDeviceInfo(context.Context, *GetDeviceInfoReq) (*GetDeviceInfoRsp, error)
}

// UnimplementedDevicePerformanceServer can be embedded to have forward compatible implementations.
type UnimplementedDevicePerformanceServer struct {
}

func (*UnimplementedDevicePerformanceServer) GetDeviceInfo(ctx context.Context, req *GetDeviceInfoReq) (*GetDeviceInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}

func RegisterDevicePerformanceServer(s *grpc.Server, srv DevicePerformanceServer) {
	s.RegisterService(&_DevicePerformance_serviceDesc, srv)
}

func _DevicePerformance_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicePerformanceServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dhcpclient.DevicePerformance/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicePerformanceServer).GetDeviceInfo(ctx, req.(*GetDeviceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DevicePerformance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dhcpclient.DevicePerformance",
	HandlerType: (*DevicePerformanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceInfo",
			Handler:    _DevicePerformance_GetDeviceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcpclient.proto",
}

func (m *GetDeviceInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IpAddr) > 0 {
		for iNdEx := len(m.IpAddr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IpAddr[iNdEx])
			copy(dAtA[i:], m.IpAddr[iNdEx])
			i = encodeVarintDhcpclient(dAtA, i, uint64(len(m.IpAddr[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DiskUsageRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DiskUsageRate))))
		i--
		dAtA[i] = 0x25
	}
	if m.MemoryUsageRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MemoryUsageRate))))
		i--
		dAtA[i] = 0x1d
	}
	if m.CpuUsageRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CpuUsageRate))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.IpAddr) > 0 {
		i -= len(m.IpAddr)
		copy(dAtA[i:], m.IpAddr)
		i = encodeVarintDhcpclient(dAtA, i, uint64(len(m.IpAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDhcpclient(dAtA []byte, offset int, v uint64) int {
	offset -= sovDhcpclient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDeviceInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IpAddr) > 0 {
		for _, s := range m.IpAddr {
			l = len(s)
			n += 1 + l + sovDhcpclient(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovDhcpclient(uint64(l))
	}
	if m.CpuUsageRate != 0 {
		n += 5
	}
	if m.MemoryUsageRate != 0 {
		n += 5
	}
	if m.DiskUsageRate != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDhcpclient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDhcpclient(x uint64) (n int) {
	return sovDhcpclient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetDeviceInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcpclient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpclient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDhcpclient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDhcpclient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = append(m.IpAddr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcpclient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcpclient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcpclient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcpclient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpclient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDhcpclient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDhcpclient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUsageRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CpuUsageRate = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsageRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MemoryUsageRate = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskUsageRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DiskUsageRate = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDhcpclient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcpclient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcpclient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDhcpclient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDhcpclient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDhcpclient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDhcpclient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDhcpclient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDhcpclient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDhcpclient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDhcpclient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDhcpclient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDhcpclient = fmt.Errorf("proto: unexpected end of group")
)
